// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package weight

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeightClient is the client API for Weight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeightClient interface {
	// 记录体重接口
	RecordWeight(ctx context.Context, in *RecordWeightRequest, opts ...grpc.CallOption) (*RecordWeightReply, error)
	// 用户体重曲线列表
	GetRecentWeight(ctx context.Context, in *GetRecentWeightRequest, opts ...grpc.CallOption) (*GetRecentWeightReply, error)
	// 用户按日历查月体重
	GetWeightByMonth(ctx context.Context, in *GetWeightByMonthRequest, opts ...grpc.CallOption) (*GetWeightByMonthReply, error)
}

type weightClient struct {
	cc grpc.ClientConnInterface
}

func NewWeightClient(cc grpc.ClientConnInterface) WeightClient {
	return &weightClient{cc}
}

func (c *weightClient) RecordWeight(ctx context.Context, in *RecordWeightRequest, opts ...grpc.CallOption) (*RecordWeightReply, error) {
	out := new(RecordWeightReply)
	err := c.cc.Invoke(ctx, "/api.weight.Weight/RecordWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weightClient) GetRecentWeight(ctx context.Context, in *GetRecentWeightRequest, opts ...grpc.CallOption) (*GetRecentWeightReply, error) {
	out := new(GetRecentWeightReply)
	err := c.cc.Invoke(ctx, "/api.weight.Weight/GetRecentWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weightClient) GetWeightByMonth(ctx context.Context, in *GetWeightByMonthRequest, opts ...grpc.CallOption) (*GetWeightByMonthReply, error) {
	out := new(GetWeightByMonthReply)
	err := c.cc.Invoke(ctx, "/api.weight.Weight/GetWeightByMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeightServer is the server API for Weight service.
// All implementations must embed UnimplementedWeightServer
// for forward compatibility
type WeightServer interface {
	// 记录体重接口
	RecordWeight(context.Context, *RecordWeightRequest) (*RecordWeightReply, error)
	// 用户体重曲线列表
	GetRecentWeight(context.Context, *GetRecentWeightRequest) (*GetRecentWeightReply, error)
	// 用户按日历查月体重
	GetWeightByMonth(context.Context, *GetWeightByMonthRequest) (*GetWeightByMonthReply, error)
	mustEmbedUnimplementedWeightServer()
}

// UnimplementedWeightServer must be embedded to have forward compatible implementations.
type UnimplementedWeightServer struct {
}

func (UnimplementedWeightServer) RecordWeight(context.Context, *RecordWeightRequest) (*RecordWeightReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordWeight not implemented")
}
func (UnimplementedWeightServer) GetRecentWeight(context.Context, *GetRecentWeightRequest) (*GetRecentWeightReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentWeight not implemented")
}
func (UnimplementedWeightServer) GetWeightByMonth(context.Context, *GetWeightByMonthRequest) (*GetWeightByMonthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeightByMonth not implemented")
}
func (UnimplementedWeightServer) mustEmbedUnimplementedWeightServer() {}

// UnsafeWeightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeightServer will
// result in compilation errors.
type UnsafeWeightServer interface {
	mustEmbedUnimplementedWeightServer()
}

func RegisterWeightServer(s grpc.ServiceRegistrar, srv WeightServer) {
	s.RegisterService(&Weight_ServiceDesc, srv)
}

func _Weight_RecordWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightServer).RecordWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.weight.Weight/RecordWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightServer).RecordWeight(ctx, req.(*RecordWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weight_GetRecentWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightServer).GetRecentWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.weight.Weight/GetRecentWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightServer).GetRecentWeight(ctx, req.(*GetRecentWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weight_GetWeightByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeightByMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeightServer).GetWeightByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.weight.Weight/GetWeightByMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeightServer).GetWeightByMonth(ctx, req.(*GetWeightByMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Weight_ServiceDesc is the grpc.ServiceDesc for Weight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.weight.Weight",
	HandlerType: (*WeightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordWeight",
			Handler:    _Weight_RecordWeight_Handler,
		},
		{
			MethodName: "GetRecentWeight",
			Handler:    _Weight_GetRecentWeight_Handler,
		},
		{
			MethodName: "GetWeightByMonth",
			Handler:    _Weight_GetWeightByMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/weight/weight.proto",
}
