// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package weight

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WeightHTTPServer interface {
	GetRecentWeight(context.Context, *GetRecentWeightRequest) (*GetRecentWeightReply, error)
	GetWeightByMonth(context.Context, *GetWeightByMonthRequest) (*GetWeightByMonthReply, error)
	RecordWeight(context.Context, *RecordWeightRequest) (*RecordWeightReply, error)
}

func RegisterWeightHTTPServer(s *http.Server, srv WeightHTTPServer) {
	r := s.Route("/")
	r.POST("/weight/record", _Weight_RecordWeight0_HTTP_Handler(srv))
	r.GET("/weight/getRecent", _Weight_GetRecentWeight0_HTTP_Handler(srv))
	r.GET("/weight/getByMonth", _Weight_GetWeightByMonth0_HTTP_Handler(srv))
}

func _Weight_RecordWeight0_HTTP_Handler(srv WeightHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecordWeightRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.weight.Weight/RecordWeight")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecordWeight(ctx, req.(*RecordWeightRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecordWeightReply)
		return ctx.Result(200, reply)
	}
}

func _Weight_GetRecentWeight0_HTTP_Handler(srv WeightHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRecentWeightRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.weight.Weight/GetRecentWeight")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRecentWeight(ctx, req.(*GetRecentWeightRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRecentWeightReply)
		return ctx.Result(200, reply)
	}
}

func _Weight_GetWeightByMonth0_HTTP_Handler(srv WeightHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWeightByMonthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.weight.Weight/GetWeightByMonth")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWeightByMonth(ctx, req.(*GetWeightByMonthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWeightByMonthReply)
		return ctx.Result(200, reply)
	}
}

type WeightHTTPClient interface {
	GetRecentWeight(ctx context.Context, req *GetRecentWeightRequest, opts ...http.CallOption) (rsp *GetRecentWeightReply, err error)
	GetWeightByMonth(ctx context.Context, req *GetWeightByMonthRequest, opts ...http.CallOption) (rsp *GetWeightByMonthReply, err error)
	RecordWeight(ctx context.Context, req *RecordWeightRequest, opts ...http.CallOption) (rsp *RecordWeightReply, err error)
}

type WeightHTTPClientImpl struct {
	cc *http.Client
}

func NewWeightHTTPClient(client *http.Client) WeightHTTPClient {
	return &WeightHTTPClientImpl{client}
}

func (c *WeightHTTPClientImpl) GetRecentWeight(ctx context.Context, in *GetRecentWeightRequest, opts ...http.CallOption) (*GetRecentWeightReply, error) {
	var out GetRecentWeightReply
	pattern := "/weight/getRecent"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.weight.Weight/GetRecentWeight"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WeightHTTPClientImpl) GetWeightByMonth(ctx context.Context, in *GetWeightByMonthRequest, opts ...http.CallOption) (*GetWeightByMonthReply, error) {
	var out GetWeightByMonthReply
	pattern := "/weight/getByMonth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.weight.Weight/GetWeightByMonth"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WeightHTTPClientImpl) RecordWeight(ctx context.Context, in *RecordWeightRequest, opts ...http.CallOption) (*RecordWeightReply, error) {
	var out RecordWeightReply
	pattern := "/weight/record"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.weight.Weight/RecordWeight"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
